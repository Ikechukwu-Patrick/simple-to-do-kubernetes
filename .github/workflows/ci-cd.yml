name: Build → Docker Hub → Deploy to LocalStack
on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allows manual triggering

env:
  DOCKERHUB_IMAGE: ike20743/todo-app  # Change to your Docker Hub repo
  IMAGE_TAG: latest                       # Can be modified for versioning
  ECS_CLUSTER: todo-cluster
  ECS_SERVICE: todo-service
  LOCALSTACK_ENDPOINT: http://localhost:4566

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging jobs

    steps:
      # --- STAGE 1: Setup & Build ---
      - uses: actions/checkout@v4

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: |
          mvn clean package -DskipTests
          echo "Build completed successfully"

      # --- STAGE 2: Docker Operations ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.DOCKERHUB_IMAGE }}:${{ env.IMAGE_TAG }} \
            -t ${{ env.DOCKERHUB_IMAGE }}:latest \
            --push .
          echo "Image pushed to Docker Hub"

      # --- STAGE 3: LocalStack Deployment ---
      - name: Verify LocalStack Health
        run: |
          curl -sSf ${{ env.LOCALSTACK_ENDPOINT }}/health | jq -e '.ecs == "running"' || \
            { echo "LocalStack ECS service not ready"; exit 1; }

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set region us-east-1
          aws configure set default.endpoint_url ${{ env.LOCALSTACK_ENDPOINT }}

      - name: Force ECS Deployment
        run: |
          MAX_RETRIES=3
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_RETRIES ]; do
            if aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_SERVICE }} \
              --force-new-deployment \
              --endpoint-url ${{ env.LOCALSTACK_ENDPOINT }}; then
              echo "Deployment triggered successfully"
              break
            else
              ATTEMPT=$((ATTEMPT+1))
              echo "Attempt $ATTEMPT failed, retrying..."
              sleep 5
            fi
          done
          [ $ATTEMPT -eq $MAX_RETRIES ] && { echo "Max retries reached"; exit 1; }

      - name: Verify Deployment
        run: |
          sleep 10  # Give ECS time to start
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --endpoint-url ${{ env.LOCALSTACK_ENDPOINT }} \
            --query 'services[0].deployments[0].runningCount' \
            | grep -q 1 || { echo "Service not running"; exit 1; }