name: Deploy to LocalStack ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_DEFAULT_REGION: us-east-1
  LOCALSTACK_ENDPOINT: http://localhost:4566
  DOCKERHUB_IMAGE: ike20743/todo-app:latest
  ECR_REPO_NAME: todo-app
  ECS_CLUSTER_NAME: localstack-ecs-cluster
  ECS_SERVICE_NAME: todo-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Increased timeout

    services:
      localstack:
        image: localstack/localstack-pro
        ports:
          - "4566:4566"
          - "4510:4510"
        env:
          SERVICES: ecr,ecs,iam,s3
          DEBUG: "1"
          LOCALSTACK_APIKEY: ${{ secrets.LOCALSTACK_APIKEY }}
          DOCKER_HOST: unix:///var/run/docker.sock
          PERSISTENCE: "0"
          HOST_TMP_FOLDER: "/tmp/localstack-tmp"
          INIT_SCRIPTS_PATH: "/dev/null"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --tmpfs /tmp/localstack:rw,exec

    steps:
      - name: Pre-pull LocalStack image
        run: |
          docker pull localstack/localstack-pro
          docker tag localstack/localstack-pro localstack-pro-cached

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          cat <<EOF > ~/.aws/config
          [default]
          region = ${{ env.AWS_DEFAULT_REGION }}
          output = json
          EOF
          
          cat <<EOF > ~/.aws/credentials
          [default]
          aws_access_key_id = test
          aws_secret_access_key = test
          EOF

      - name: Verify LocalStack
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:4566/_localstack/health | grep -q '"ecr": "available"'; then
              echo "✅ LocalStack ready"
              exit 0
            fi
            sleep 5
          done
          echo "❌ LocalStack failed"
          exit 1

      - name: Pull and push image
        run: |
          docker pull ${{ env.DOCKERHUB_IMAGE }}
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecr create-repository \
            --repository-name ${{ env.ECR_REPO_NAME }} || true
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecr get-login-password | \
            docker login --username AWS --password-stdin localhost:4510
          docker tag ${{ env.DOCKERHUB_IMAGE }} localhost:4510/${{ env.ECR_REPO_NAME }}:latest
          docker push localhost:4510/${{ env.ECR_REPO_NAME }}:latest

      - name: Deploy to ECS
        run: |
          cat <<EOF > task-definition.json
          {
            "family": "${{ env.ECS_SERVICE_NAME }}",
            "networkMode": "awsvpc",
            "containerDefinitions": [{
              "name": "${{ env.ECR_REPO_NAME }}",
              "image": "localhost:4510/${{ env.ECR_REPO_NAME }}:latest",
              "essential": true,
              "portMappings": [{
                "containerPort": 8084,
                "hostPort": 8084
              }]
            }],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs register-task-definition \
            --cli-input-json file://task-definition.json
          
          if ! aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --services ${{ env.ECS_SERVICE_NAME }} &>/dev/null; then
            aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs create-service \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --service-name ${{ env.ECS_SERVICE_NAME }} \
              --task-definition ${{ env.ECS_SERVICE_NAME }} \
              --desired-count 1 \
              --launch-type FARGATE
          else
            aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs update-service \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --service ${{ env.ECS_SERVICE_NAME }} \
              --task-definition ${{ env.ECS_SERVICE_NAME }} \
              --force-new-deployment
          fi

      - name: Verify deployment
        run: |
          sleep 30
          curl -v -f http://localhost:8084/actuator/health || \
            (echo "❌ Health check failed"; exit 1)