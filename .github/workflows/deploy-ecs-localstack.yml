name: Deploy Java TodoApp to ECS using LocalStack

on:
  push:
    branches: [ "master" ]

env:
  LOCALSTACK_ENDPOINT: http://localhost:4566
  ECR_REPO_NAME: todo-app
  ECS_CLUSTER_NAME: todo-cluster
  ECS_TASK_DEFINITION: todo-task
  AWS_DEFAULT_REGION: us-east-1
  APP_PORT: 8084
  DOCKERHUB_IMAGE: ike20743/todo-app:latest

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Extended timeout

    services:
      localstack:
        image: localstack/localstack-pro
        ports:
          - "4566:4566"
          - "4510:4510"
        env:
          SERVICES: ecr,ecs
          DEBUG: "1"
          LOCALSTACK_APIKEY: ${{ secrets.LOCALSTACK_APIKEY }}
          DOCKER_HOST: unix:///var/run/docker.sock
          PERSISTENCE: "1"
          LS_LOG: "debug"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "localstack_data:/tmp/localstack"
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          --name=localstack-main

    steps:
      - name: Check Docker environment
        run: |
          docker version
          docker info

      - name: Checkout code
        uses: actions/checkout@v4

      # ===== LOCALSTACK INITIALIZATION =====
      - name: Wait for LocalStack readiness
        run: |
          echo "Waiting for LocalStack services..."
          for i in {1..30}; do
            if curl -s http://localhost:4566/_localstack/health | grep -q '"ecr": "available"'; then
              echo "✅ LocalStack services are ready"
              exit 0
            fi
            echo "Attempt $i/30 - Waiting for services..."
            sleep 5
          done
          echo "❌ LocalStack failed to initialize"
          curl -v http://localhost:4566/_localstack/health
          exit 1

      # ===== AWS CONFIGURATION =====
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set region ${{ env.AWS_DEFAULT_REGION }}
          aws configure set output json

      # ===== IMAGE MANAGEMENT =====
      - name: Pull latest Docker image
        run: |
          docker pull ${{ env.DOCKERHUB_IMAGE }}
          docker tag ${{ env.DOCKERHUB_IMAGE }} ${{ env.ECR_REPO_NAME }}:latest

      - name: Set up ECR repository
        run: |
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecr create-repository \
            --repository-name ${{ env.ECR_REPO_NAME }} || echo "Repository may already exist"

      - name: Login to ECR
        run: |
          ECR_PASSWORD=$(aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecr get-login-password)
          echo $ECR_PASSWORD | docker login --username AWS --password-stdin localhost:4510

      - name: Push to ECR
        run: |
          docker tag ${{ env.ECR_REPO_NAME }}:latest localhost:4510/${{ env.ECR_REPO_NAME }}:latest
          docker push localhost:4510/${{ env.ECR_REPO_NAME }}:latest

      # ===== ECS DEPLOYMENT =====
      - name: Create ECS cluster
        run: |
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs create-cluster \
            --cluster-name ${{ env.ECS_CLUSTER_NAME }}

      - name: Register task definition
        run: |
          cat <<EOF > task-definition.json
          {
            "family": "${{ env.ECS_TASK_DEFINITION }}",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "${{ env.ECR_REPO_NAME }}",
                "image": "localhost:4510/${{ env.ECR_REPO_NAME }}:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": ${{ env.APP_PORT }},
                    "hostPort": ${{ env.APP_PORT }}
                  }
                ],
                "environment": [
                  {
                    "name": "SERVER_PORT",
                    "value": "${{ env.APP_PORT }}"
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs register-task-definition \
            --cli-input-json file://task-definition.json

      - name: Run ECS task
        run: |
          TASK_ARN=$(aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs run-task \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-1234],securityGroups=[sg-1234]}" \
            --query 'tasks[0].taskArn' --output text)
          
          echo "Waiting for task to start..."
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs wait tasks-running \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --tasks $TASK_ARN

      # ===== VERIFICATION =====
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 30  # Extended wait for Java app
          
          echo "Checking running containers:"
          docker ps -a
          
          echo "Checking ECS tasks:"
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER_NAME }}
          
          echo "Testing application health:"
          curl -v -f http://localhost:${{ env.APP_PORT }}/actuator/health || \
            (echo "❌ Health check failed"; exit 1)
          echo "✅ Deployment successful"

      # ===== DEBUGGING (ON FAILURE) =====
      - name: Collect logs on failure
        if: ${{ failure() }}
        run: |
          echo "=== LocalStack logs ==="
          docker logs localstack-main
          
          echo "=== Running containers ==="
          docker ps -a
          
          echo "=== ECS task status ==="
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --tasks $(aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs list-tasks \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --query 'taskArns' --output text)