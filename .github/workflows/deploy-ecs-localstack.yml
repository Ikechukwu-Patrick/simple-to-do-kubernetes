name: Deploy Java TodoApp to ECS using LocalStack

on:
  push:
    branches: [ "master" ]

env:
  LOCALSTACK_ENDPOINT: http://localhost:4566
  ECR_REPO_NAME: todo-app
  ECS_CLUSTER_NAME: todo-cluster
  ECS_TASK_DEFINITION: todo-task
  AWS_DEFAULT_REGION: us-east-1
  APP_PORT: 8084
  DOCKERHUB_IMAGE: ike20743/todo-app:latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack-pro
        ports:
          - "4566:4566"
          - "4510:4510"
        env:
          SERVICES: ecr,ecs
          DEBUG: "1"
          LOCALSTACK_APIKEY: ${{ secrets.LOCALSTACK_APIKEY }}
          DOCKER_HOST: unix:///var/run/docker.sock
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ===== SETUP =====
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set region ${{ env.AWS_DEFAULT_REGION }}
          aws configure set output json

      # ===== IMAGE HANDLING =====
      - name: Pull latest Docker Hub image
        run: |
          docker pull ${{ env.DOCKERHUB_IMAGE }}
          docker tag ${{ env.DOCKERHUB_IMAGE }} ${{ env.ECR_REPO_NAME }}:latest

      - name: Setup ECR repository
        run: |
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecr create-repository \
            --repository-name ${{ env.ECR_REPO_NAME }} || true

      - name: Login to ECR
        run: |
          ECR_PASSWORD=$(aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecr get-login-password)
          echo $ECR_PASSWORD | docker login --username AWS --password-stdin localhost:4510

      - name: Push to ECR
        run: |
          docker tag ${{ env.ECR_REPO_NAME }}:latest localhost:4510/${{ env.ECR_REPO_NAME }}:latest
          docker push localhost:4510/${{ env.ECR_REPO_NAME }}:latest

      # ===== ECS DEPLOYMENT =====
      - name: Create ECS cluster
        run: |
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs create-cluster \
            --cluster-name ${{ env.ECS_CLUSTER_NAME }}

      - name: Register task definition
        run: |
          cat <<EOF > task-definition.json
          {
            "family": "${{ env.ECS_TASK_DEFINITION }}",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "${{ env.ECR_REPO_NAME }}",
                "image": "localhost:4510/${{ env.ECR_REPO_NAME }}:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": ${{ env.APP_PORT }},
                    "hostPort": ${{ env.APP_PORT }}
                  }
                ],
                "environment": [
                  {
                    "name": "SERVER_PORT",
                    "value": "${{ env.APP_PORT }}"
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs register-task-definition \
            --cli-input-json file://task-definition.json

      - name: Run ECS task
        run: |
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs run-task \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-1234],securityGroups=[sg-1234]}"

      # ===== DEBUGGING =====
      - name: Check running containers
        run: docker ps -a

      - name: Check ECS tasks
        run: |
          aws --endpoint-url=${{ env.LOCALSTACK_ENDPOINT }} ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER_NAME }}

      # ===== VERIFICATION =====
      - name: Verify deployment
        run: |
          echo "Waiting for app to start..."
          sleep 30
          curl -v http://localhost:${{ env.APP_PORT }}/actuator/health || \
            (echo "Health check failed!"; exit 1)